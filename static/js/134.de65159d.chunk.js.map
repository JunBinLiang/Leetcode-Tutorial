{"version":3,"sources":["../node_modules/prismjs/components/prism-ftl.min.js"],"names":["n","i","e","replace","t","comment","string","pattern","greedy","RegExp","inside","interpolation","lookbehind","interpolation-punctuation","alias","rest","keyword","boolean","builtin-function","function","number","operator","punctuation","languages","ftl","ftl-comment","ftl-directive","directive","content","ftl-interpolation","hooks","add","buildPlaceholders","tokenizePlaceholders","Prism"],"mappings":"8EAAA,SAAAA,GACA,QAAAC,EAAA,kHAAAC,EAAA,EAAwIA,EAAA,EAAOA,IAC/ID,IAAAE,QAAA,qBACA,OAAAF,IAIAA,IAAAE,QAAA,uBACA,IAAAC,EAAA,CACAC,QAAA,kBACAC,OAAA,EACAC,QAAA,iCACAC,QAAA,GACK,CACLD,QAAAE,OAAA,kEAAiFN,QAAA,qBACjF,OAAAF,KAEAO,QAAA,EACAE,OAAA,CACAC,cAAA,CACAJ,QAAAE,OAAA,oDAA4EN,QAAA,qBAC5E,OAAAF,KAEAW,YAAA,EACAF,OAAA,CACAG,4BAAA,CACAN,QAAA,YACAO,MAAA,eAEAC,KAAA,UAKAC,QAAA,aACAC,QAAA,qBACAC,mBAAA,CACAX,QAAA,uBACAK,YAAA,EACAE,MAAA,YAEAK,SAAA,eACAC,OAAA,gBACAC,SAAA,6EACAC,YAAA,iBAEAlB,EAAAE,OAAA,GAAAI,OAAAC,cAAAD,OAAAK,KAAAX,EAAAJ,EAAAuB,UAAAC,IAAA,CACAC,cAAA,CACAlB,QAAA,eACAO,MAAA,WAEAY,gBAAA,CACAnB,QAAA,cACAG,OAAA,CACAiB,UAAA,CACApB,QAAA,uBACAK,YAAA,EACAE,MAAA,WAEAQ,YAAA,cACAM,QAAA,CACArB,QAAA,mBACAO,MAAA,MACAJ,OAAAN,KAIAyB,oBAAA,CACAtB,QAAA,kBACAG,OAAA,CACAY,YAAA,YACAM,QAAA,CACArB,QAAA,mBACAO,MAAA,MACAJ,OAAAN,MAIGJ,EAAA8B,MAAAC,IAAA,2BAAA7B,GACH,IAAAE,EAAAK,OAAA,qEAAsFN,QAAA,qBACtF,OAAAF,IACK,MACLD,EAAAuB,UAAA,qBAAAS,kBAAA9B,EAAA,MAAAE,KACGJ,EAAA8B,MAAAC,IAAA,0BAAA7B,GACHF,EAAAuB,UAAA,qBAAAU,qBAAA/B,EAAA,SApFA,CAsFCgC","file":"static/js/134.de65159d.chunk.js","sourcesContent":["!function (n) {\n  for (var i = \"[^<()\\\"']|\\\\((?:<expr>)*\\\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*--\\x3e|\\\"(?:[^\\\\\\\\\\\"]|\\\\\\\\.)*\\\"|'(?:[^\\\\\\\\']|\\\\\\\\.)*'\", e = 0; e < 2; e++) {\n    i = i.replace(/<expr>/g, function () {\n      return i;\n    });\n  }\n\n  i = i.replace(/<expr>/g, \"[^\\\\s\\\\S]\");\n  var t = {\n    comment: /<#--[\\s\\S]*?-->/,\n    string: [{\n      pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n      greedy: !0\n    }, {\n      pattern: RegExp(\"(\\\"|')(?:(?!\\\\1|\\\\$\\\\{)[^\\\\\\\\]|\\\\\\\\.|\\\\$\\\\{(?:<expr>)*?\\\\})*\\\\1\".replace(/<expr>/g, function () {\n        return i;\n      })),\n      greedy: !0,\n      inside: {\n        interpolation: {\n          pattern: RegExp(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\\\\\\\\\)*)\\\\$\\\\{(?:<expr>)*?\\\\}\".replace(/<expr>/g, function () {\n            return i;\n          })),\n          lookbehind: !0,\n          inside: {\n            \"interpolation-punctuation\": {\n              pattern: /^\\$\\{|\\}$/,\n              alias: \"punctuation\"\n            },\n            rest: null\n          }\n        }\n      }\n    }],\n    keyword: /\\b(?:as)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    \"builtin-function\": {\n      pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n      lookbehind: !0,\n      alias: \"function\"\n    },\n    function: /\\w+(?=\\s*\\()/,\n    number: /\\d+(?:\\.\\d+)?/,\n    operator: /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n    punctuation: /[,;.:()[\\]{}]/\n  };\n  t.string[1].inside.interpolation.inside.rest = t, n.languages.ftl = {\n    \"ftl-comment\": {\n      pattern: /^<#--[\\s\\S]*/,\n      alias: \"comment\"\n    },\n    \"ftl-directive\": {\n      pattern: /^<[\\s\\S]+>$/,\n      inside: {\n        directive: {\n          pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n          lookbehind: !0,\n          alias: \"keyword\"\n        },\n        punctuation: /^<\\/?|\\/?>$/,\n        content: {\n          pattern: /[\\s\\S]*\\S[\\s\\S]*/,\n          alias: \"ftl\",\n          inside: t\n        }\n      }\n    },\n    \"ftl-interpolation\": {\n      pattern: /^\\$\\{[\\s\\S]*\\}$/,\n      inside: {\n        punctuation: /^\\$\\{|\\}$/,\n        content: {\n          pattern: /[\\s\\S]*\\S[\\s\\S]*/,\n          alias: \"ftl\",\n          inside: t\n        }\n      }\n    }\n  }, n.hooks.add(\"before-tokenize\", function (e) {\n    var t = RegExp(\"<#--[^]*?--\\x3e|</?[#@][a-zA-Z](?:<expr>)*?>|\\\\$\\\\{(?:<expr>)*?\\\\}\".replace(/<expr>/g, function () {\n      return i;\n    }), \"gi\");\n    n.languages[\"markup-templating\"].buildPlaceholders(e, \"ftl\", t);\n  }), n.hooks.add(\"after-tokenize\", function (e) {\n    n.languages[\"markup-templating\"].tokenizePlaceholders(e, \"ftl\");\n  });\n}(Prism);"],"sourceRoot":""}