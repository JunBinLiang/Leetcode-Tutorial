{"version":3,"sources":["../node_modules/prismjs/components/prism-powershell.js"],"names":["Prism","powershell","languages","comment","pattern","lookbehind","string","greedy","inside","function","namespace","boolean","variable","keyword","operator","punctuation","stringInside"],"mappings":"+EAAA,SAAAA,GACA,IAAAC,EAAAD,EAAAE,UAAAD,WAAA,CACAE,QAAA,EACAC,QAAA,uBACAC,YAAA,GACK,CACLD,QAAA,cACAC,YAAA,IAEAC,OAAA,EACAF,QAAA,uBACAG,QAAA,EACAC,OAAA,CACAC,SAAA,CAEAL,QAAA,uDACAC,YAAA,EAEAG,OAAA,MAGK,CACLJ,QAAA,iBACAG,QAAA,IAIAG,UAAA,kDACAC,QAAA,sBACAC,SAAA,UAIAH,SAAA,koCAEAI,QAAA,kPACAC,SAAA,CACAV,QAAA,uJACAC,YAAA,GAEAU,YAAA,iBAGAC,EAAAf,EAAAK,OAAA,GAAAE,OACAQ,EAAAL,QAAAV,EAAAU,QACAK,EAAAJ,SAAAX,EAAAW,SACAI,EAAAP,SAAAD,OAAAP,EA9CA,CA+CCD","file":"static/js/315.cd14ad97.chunk.js","sourcesContent":["(function (Prism) {\n  var powershell = Prism.languages.powershell = {\n    'comment': [{\n      pattern: /(^|[^`])<#[\\s\\S]*?#>/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^`])#.*/,\n      lookbehind: true\n    }],\n    'string': [{\n      pattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n      greedy: true,\n      inside: {\n        'function': {\n          // Allow for one level of nesting\n          pattern: /(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n          lookbehind: true,\n          // Populated at end of file\n          inside: {}\n        }\n      }\n    }, {\n      pattern: /'(?:[^']|'')*'/,\n      greedy: true\n    }],\n    // Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices\n    // Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)\n    'namespace': /\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,\n    'boolean': /\\$(?:true|false)\\b/i,\n    'variable': /\\$\\w+\\b/,\n    // Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example\n    // Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n    // Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n    'function': [/\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i, /\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i],\n    // per http://technet.microsoft.com/en-us/library/hh847744.aspx\n    'keyword': /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n    'operator': {\n      pattern: /(\\W?)(?:!|-(?:eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n      lookbehind: true\n    },\n    'punctuation': /[|{}[\\];(),.]/\n  }; // Variable interpolation inside strings, and nested expressions\n\n  var stringInside = powershell.string[0].inside;\n  stringInside.boolean = powershell.boolean;\n  stringInside.variable = powershell.variable;\n  stringInside.function.inside = powershell;\n})(Prism);"],"sourceRoot":""}