{"version":3,"sources":["../node_modules/prismjs/components/prism-lilypond.js"],"names":["Prism","schemeExpression","source","i","replace","lilypond","languages","comment","embedded-scheme","pattern","RegExp","lookbehind","greedy","inside","scheme","alias","embedded-lilypond","punctuation","rest","string","class-name","keyword","operator","number","ly"],"mappings":"8EAAA,SAAAA,GAMA,IALA,IAAAC,EAAA,mGAA6GC,OAK7GC,EAAA,EAAiBA,EAFjB,EAEwCA,IACxCF,IAAAG,QAAA,qBACA,OAAAH,IAIAA,IAAAG,QAAA,oBAAAF,QACA,IAAAG,EAAAL,EAAAM,UAAAD,SAAA,CACAE,QAAA,8BACAC,kBAAA,CACAC,QAAAC,OAAA,8DAAAR,OAAAE,QAAA,qBACA,OAAAH,IACO,KACPU,YAAA,EACAC,QAAA,EACAC,OAAA,CACAC,OAAA,CACAL,QAAA,eACAE,YAAA,EACAI,MAAA,kBACAF,OAAA,CACAG,oBAAA,CACAP,QAAA,iBACAG,QAAA,EACAC,OAAA,CACAI,YAAA,YACAZ,SAAA,CACAI,QAAA,UACAM,MAAA,oBACAF,OAAA,QAKAK,KAAAlB,EAAAM,UAAAQ,SAGAG,YAAA,MAGAE,OAAA,CACAV,QAAA,oBACAG,QAAA,GAEAQ,aAAA,CACAX,QAAA,mBACAE,YAAA,GAEAU,QAAA,CACAZ,QAAA,iBACAI,OAAA,CACAI,YAAA,QAGAK,SAAA,aACAL,YAAA,CACAR,QAAA,uGACAE,YAAA,GAEAY,OAAA,qBAEAlB,EAAA,mBAAAQ,OAAA,OAAAA,OAAA,qBAAAA,OAAA,SAAAA,OAAAR,EACAL,EAAAM,UAAAkB,GAAAnB,EApEA,CAqECL","file":"static/js/231.1d5c7f81.chunk.js","sourcesContent":["(function (Prism) {\n  var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/.source; // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n  // For some reason, this can't be 4\n\n  var recursivenessLog2 = 5;\n\n  for (var i = 0; i < recursivenessLog2; i++) {\n    schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n      return schemeExpression;\n    });\n  }\n\n  schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source);\n  var lilypond = Prism.languages.lilypond = {\n    'comment': /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n    'embedded-scheme': {\n      pattern: RegExp(/(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(/<expr>/g, function () {\n        return schemeExpression;\n      }), 'm'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'scheme': {\n          pattern: /^(#)[\\s\\S]+$/,\n          lookbehind: true,\n          alias: 'language-scheme',\n          inside: {\n            'embedded-lilypond': {\n              pattern: /#\\{[\\s\\S]*?#\\}/,\n              greedy: true,\n              inside: {\n                'punctuation': /^#\\{|#\\}$/,\n                'lilypond': {\n                  pattern: /[\\s\\S]+/,\n                  alias: 'language-lilypond',\n                  inside: null // see below\n\n                }\n              }\n            },\n            rest: Prism.languages.scheme\n          }\n        },\n        'punctuation': /#/\n      }\n    },\n    'string': {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\\\new\\s+)[\\w-]+/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /\\\\[a-z][-\\w]*/i,\n      inside: {\n        'punctuation': /^\\\\/\n      }\n    },\n    'operator': /[=|]|<<|>>/,\n    'punctuation': {\n      pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n      lookbehind: true\n    },\n    'number': /\\b\\d+(?:\\/\\d+)?\\b/\n  };\n  lilypond['embedded-scheme'].inside['scheme'].inside['embedded-lilypond'].inside['lilypond'].inside = lilypond;\n  Prism.languages.ly = lilypond;\n})(Prism);"],"sourceRoot":""}