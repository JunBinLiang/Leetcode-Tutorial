{"version":3,"sources":["../node_modules/prismjs/components/prism-latte.min.js"],"names":["t","languages","latte","comment","ld","pattern","inside","punctuation","tag","alias","rd","php","e","extend","insertBefore","n-attr","attr-name","attr-value","lookbehind","hooks","add","a","language","buildPlaceholders","grammar","tokenizePlaceholders","Prism"],"mappings":"8EAAA,SAAAA,GACAA,EAAAC,UAAAC,MAAA,CACAC,QAAA,eACAC,GAAA,CACAC,QAAA,kCACAC,OAAA,CACAC,YAAA,SACAC,IAAA,CACAH,QAAA,KACAI,MAAA,eAIAC,GAAA,CACAL,QAAA,MACAC,OAAA,CACAC,YAAA,OAGAI,IAAA,CACAN,QAAA,mBACAI,MAAA,eACAH,OAAAN,EAAAC,UAAAU,MAGA,IAAAC,EAAAZ,EAAAC,UAAAY,OAAA,aACAb,EAAAC,UAAAa,aAAA,uBACAC,SAAA,CACAV,QAAA,qDACAC,OAAA,CACAU,YAAA,CACAX,QAAA,WACAI,MAAA,aAEAQ,aAAA,CACAZ,QAAA,WACAC,OAAA,CACAC,YAAA,OACAF,QAAA,mBACAa,YAAA,IAEAP,IAAA,CACAN,QAAA,mBACAC,OAAAN,EAAAC,UAAAU,UAMGC,EAAAJ,KAAAR,EAAAmB,MAAAC,IAAA,2BAAAC,GACH,UAAAA,EAAAC,WACAtB,EAAAC,UAAA,qBAAAsB,kBAAAF,EAAA,uHAAgLA,EAAAG,QAAAZ,KAE7KZ,EAAAmB,MAAAC,IAAA,0BAAAC,GACHrB,EAAAC,UAAA,qBAAAwB,qBAAAJ,EAAA,WAtDA,CAwDCK","file":"static/js/228.7f7ae6a6.chunk.js","sourcesContent":["!function (t) {\n  t.languages.latte = {\n    comment: /^\\{\\*[\\s\\S]*/,\n    ld: {\n      pattern: /^\\{(?:[=_]|\\/?(?!\\d|\\w+\\()\\w+|)/,\n      inside: {\n        punctuation: /^\\{\\/?/,\n        tag: {\n          pattern: /.+/,\n          alias: \"important\"\n        }\n      }\n    },\n    rd: {\n      pattern: /\\}$/,\n      inside: {\n        punctuation: /.+/\n      }\n    },\n    php: {\n      pattern: /\\S(?:[\\s\\S]*\\S)?/,\n      alias: \"language-php\",\n      inside: t.languages.php\n    }\n  };\n  var e = t.languages.extend(\"markup\", {});\n  t.languages.insertBefore(\"inside\", \"attr-value\", {\n    \"n-attr\": {\n      pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n      inside: {\n        \"attr-name\": {\n          pattern: /^[^\\s=]+/,\n          alias: \"important\"\n        },\n        \"attr-value\": {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            punctuation: [/^=/, {\n              pattern: /^(\\s*)[\"']|[\"']$/,\n              lookbehind: !0\n            }],\n            php: {\n              pattern: /\\S(?:[\\s\\S]*\\S)?/,\n              inside: t.languages.php\n            }\n          }\n        }\n      }\n    }\n  }, e.tag), t.hooks.add(\"before-tokenize\", function (a) {\n    if (\"latte\" === a.language) {\n      t.languages[\"markup-templating\"].buildPlaceholders(a, \"latte\", /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*[\\s\\S]*?\\*\\/)*?\\}/g), a.grammar = e;\n    }\n  }), t.hooks.add(\"after-tokenize\", function (a) {\n    t.languages[\"markup-templating\"].tokenizePlaceholders(a, \"latte\");\n  });\n}(Prism);"],"sourceRoot":""}