{"version":3,"sources":["../node_modules/prismjs/components/prism-regex.js"],"names":["Prism","specialEscape","pattern","alias","escape","rangeChar","source","range","RegExp","groupName","lookbehind","languages","regex","charset","inside","charset-negation","charset-punctuation","range-punctuation","special-escape","charclass","backreference","group-name","anchor","group","quantifier","alternation"],"mappings":"8EAAA,SAAAA,GACA,IAAAC,EAAA,CACAC,QAAA,uBACAC,MAAA,UAEAC,EAAA,6FASAC,EAAA,eAAAD,EAAAE,OAAA,IACAC,EAAAC,OAAAH,EAAA,IAAAA,GAEAI,EAAA,CACAP,QAAA,wBACAQ,YAAA,EACAP,MAAA,YAEAH,EAAAW,UAAAC,MAAA,CACAC,QAAA,CACAX,QAAA,kDACAQ,YAAA,EACAI,OAAA,CACAC,mBAAA,CACAb,QAAA,UACAQ,YAAA,EACAP,MAAA,YAEAa,sBAAA,CACAd,QAAA,UACAC,MAAA,eAEAI,MAAA,CACAL,QAAAK,EACAO,OAAA,CACAV,SACAa,oBAAA,CACAf,QAAA,IACAC,MAAA,cAIAe,iBAAAjB,EACAkB,UArCA,CACAjB,QAAA,uBACAC,MAAA,cAoCAC,WAGAc,iBAAAjB,EACAkB,UA9CA,CACAjB,QAAA,0BACAC,MAAA,cA6CAiB,cAAA,EAEAlB,QAAA,2BACAC,MAAA,WACK,CACLD,QAAA,eACAC,MAAA,UACAW,OAAA,CACAO,aAAAZ,KAGAa,OAAA,CACApB,QAAA,kBACAC,MAAA,YAEAC,SACAmB,MAAA,EAIArB,QAAA,8EACAC,MAAA,cACAW,OAAA,CACAO,aAAAZ,IAEK,CACLP,QAAA,KACAC,MAAA,gBAEAqB,WAAA,CACAtB,QAAA,kCACAC,MAAA,UAEAsB,YAAA,CACAvB,QAAA,KACAC,MAAA,YAxFA,CA2FCH","file":"static/js/349.6a1f1b26.chunk.js","sourcesContent":["(function (Prism) {\n  var specialEscape = {\n    pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n    alias: 'escape'\n  };\n  var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;\n  var charClass = {\n    pattern: /\\.|\\\\[wsd]|\\\\p{[^{}]+}/i,\n    alias: 'class-name'\n  };\n  var charClassWithoutDot = {\n    pattern: /\\\\[wsd]|\\\\p{[^{}]+}/i,\n    alias: 'class-name'\n  };\n  var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n  var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n  var groupName = {\n    pattern: /(<|')[^<>']+(?=[>']$)/,\n    lookbehind: true,\n    alias: 'variable'\n  };\n  Prism.languages.regex = {\n    'charset': {\n      pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n      lookbehind: true,\n      inside: {\n        'charset-negation': {\n          pattern: /(^\\[)\\^/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        'charset-punctuation': {\n          pattern: /^\\[|\\]$/,\n          alias: 'punctuation'\n        },\n        'range': {\n          pattern: range,\n          inside: {\n            'escape': escape,\n            'range-punctuation': {\n              pattern: /-/,\n              alias: 'operator'\n            }\n          }\n        },\n        'special-escape': specialEscape,\n        'charclass': charClassWithoutDot,\n        'escape': escape\n      }\n    },\n    'special-escape': specialEscape,\n    'charclass': charClass,\n    'backreference': [{\n      // a backreference which is not an octal escape\n      pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n      alias: 'keyword'\n    }, {\n      pattern: /\\\\k<[^<>']+>/,\n      alias: 'keyword',\n      inside: {\n        'group-name': groupName\n      }\n    }],\n    'anchor': {\n      pattern: /[$^]|\\\\[ABbGZz]/,\n      alias: 'function'\n    },\n    'escape': escape,\n    'group': [{\n      // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n      // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n      // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n      pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n      alias: 'punctuation',\n      inside: {\n        'group-name': groupName\n      }\n    }, {\n      pattern: /\\)/,\n      alias: 'punctuation'\n    }],\n    'quantifier': {\n      pattern: /(?:[+*?]|\\{(?:\\d+,?\\d*)\\})[?+]?/,\n      alias: 'number'\n    },\n    'alternation': {\n      pattern: /\\|/,\n      alias: 'keyword'\n    }\n  };\n})(Prism);"],"sourceRoot":""}