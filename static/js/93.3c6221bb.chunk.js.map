{"version":3,"sources":["../node_modules/prismjs/components/prism-dhall.js"],"names":["Prism","languages","dhall","comment","string","pattern","greedy","inside","interpolation","expression","lookbehind","alias","punctuation","label","url","env","function","operator","variable","hash","number","keyword","builtin","boolean","class-name"],"mappings":"4EAEAA,MAAAC,UAAAC,MAAA,CAIAC,QAAA,yEACAC,OAAA,CACAC,QAAA,4DACAC,QAAA,EACAC,OAAA,CACAC,cAAA,CACAH,QAAA,eACAE,OAAA,CACAE,WAAA,CACAJ,QAAA,wBACAK,YAAA,EACAC,MAAA,iBACAJ,OAAA,MAGAK,YAAA,cAKAC,MAAA,CACAR,QAAA,UACAC,QAAA,GAEAQ,IAAA,CAEAT,QAAA,0FACAC,QAAA,GAEAS,IAAA,CAEAV,QAAA,yCACAC,QAAA,EACAC,OAAA,CACAS,SAAA,OACAC,SAAA,KACAC,SAAA,YAGAC,KAAA,CAEAd,QAAA,4BACAE,OAAA,CACAS,SAAA,SACAC,SAAA,IACAG,OAAA,mBAIAC,QAAA,qFACAC,QAAA,oBACAC,QAAA,qBACAH,OAAA,gFACAH,SAAA,qGACAL,YAAA,sBAEAY,aAAA,gBAEAxB,MAAAC,UAAAC,MAAAE,OAAAG,OAAAC,cAAAD,OAAAE,WAAAF,OAAAP,MAAAC,UAAAC","file":"static/js/93.3c6221bb.chunk.js","sourcesContent":["// ABNF grammar:\n// https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\nPrism.languages.dhall = {\n  // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n  // The multi-line pattern is essentially this:\n  //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n  'comment': /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\$\\{[^{}]*\\}/,\n        inside: {\n          'expression': {\n            pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            alias: 'language-dhall',\n            inside: null // see blow\n\n          },\n          'punctuation': /\\$\\{|\\}/\n        }\n      }\n    }\n  },\n  'label': {\n    pattern: /`[^`]*`/,\n    greedy: true\n  },\n  'url': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n    pattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n    greedy: true\n  },\n  'env': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n    pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n    greedy: true,\n    inside: {\n      'function': /^env/,\n      'operator': /^:/,\n      'variable': /[\\s\\S]+/\n    }\n  },\n  'hash': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n    pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n    inside: {\n      'function': /sha256/,\n      'operator': /:/,\n      'number': /[\\da-fA-F]{64}/\n    }\n  },\n  // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n  'keyword': /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n  'builtin': /\\b(?:Some|None)\\b/,\n  'boolean': /\\b(?:False|True)\\b/,\n  'number': /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n  'operator': /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||[!=]=|===|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n  'punctuation': /\\.\\.|[{}\\[\\](),./]/,\n  // we'll just assume that every capital word left is a type name\n  'class-name': /\\b[A-Z]\\w*\\b/\n};\nPrism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;"],"sourceRoot":""}