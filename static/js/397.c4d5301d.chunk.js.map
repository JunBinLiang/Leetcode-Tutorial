{"version":3,"sources":["../node_modules/prismjs/components/prism-stan.js"],"names":["Prism","languages","stan","comment","string","pattern","greedy","directive","lookbehind","alias","function-arg","constraint","inside","expression","property","operator","punctuation","keyword","function","number","boolean"],"mappings":"8EACAA,MAAAC,UAAAC,KAAA,CACAC,QAAA,yCACAC,OAAA,CAGAC,QAAA,kCACAC,QAAA,GAEAC,UAAA,CACAF,QAAA,yBACAG,YAAA,EACAC,MAAA,YAEAC,eAAA,CACAL,QAAA,qHACAG,YAAA,EACAC,MAAA,YAEAE,WAAA,CACAN,QAAA,uDACAG,YAAA,EACAI,OAAA,CACAC,WAAA,CACAR,QAAA,6CACAG,YAAA,EACAI,OAAA,MAGAE,SAAA,sBACAC,SAAA,IACAC,YAAA,cAGAC,QAAA,kTACA,mGACAC,SAAA,uBACAC,OAAA,+CACAC,QAAA,qBACAL,SAAA,8CACAC,YAAA,gBAEAhB,MAAAC,UAAAC,KAAAS,WAAAC,OAAAC,WAAAD,OAAAZ,MAAAC,UAAAC","file":"static/js/397.c4d5301d.chunk.js","sourcesContent":["// https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html\nPrism.languages.stan = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n  'string': {\n    // String literals can contain spaces and any printable ASCII characters except for \" and \\\n    // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n    pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n    greedy: true\n  },\n  'directive': {\n    pattern: /^([ \\t]*)#include\\b.*/m,\n    lookbehind: true,\n    alias: 'property'\n  },\n  'function-arg': {\n    pattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'constraint': {\n    pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n    lookbehind: true,\n    inside: {\n      'expression': {\n        pattern: /(=\\s*)(?:(?!\\s*(?:>$|,\\s*\\w+\\s*=))[\\s\\S])+/,\n        lookbehind: true,\n        inside: null // see below\n\n      },\n      'property': /\\b[a-z]\\w*(?=\\s*=)/i,\n      'operator': /=/,\n      'punctuation': /^<|>$|[,]/\n    }\n  },\n  'keyword': [/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/, // these are functions that are known to take another function as their first argument.\n  /\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/],\n  'function': /\\b[a-z]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator': /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n  'punctuation': /[()\\[\\]{},;]/\n};\nPrism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;"],"sourceRoot":""}