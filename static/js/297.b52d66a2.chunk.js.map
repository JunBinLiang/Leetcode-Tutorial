{"version":3,"sources":["../node_modules/prismjs/components/prism-pascaligo.js"],"names":["Prism","braces","source","type","replace","pascaligo","languages","comment","string","pattern","greedy","class-name","RegExp","lookbehind","inside","keyword","boolean","builtin","function","number","operator","punctuation","classNameInside","reduce","accum","key","forEach","p"],"mappings":"8EAAA,SAAAA,GAEA,IAAAC,EAAA,2CAAAC,OACAC,EAAA,gCAAAD,OAAAE,QAAA,uBACA,OAAAH,IAEAI,EAAAL,EAAAM,UAAAD,UAAA,CACAE,QAAA,0BACAC,OAAA,CACAC,QAAA,8CACAC,QAAA,GAEAC,aAAA,EACAF,QAAAG,OAAA,+BAAAV,OAAAE,QAAA,qBACA,OAAAD,IACO,KACPU,YAAA,EACAC,OAAA,MAEK,CACLL,QAAAG,OAAA,oBAAAV,OAAAE,QAAA,qBACA,OAAAD,IACO,KACPW,OAAA,MAEK,CACLL,QAAAG,OAAA,eAAAV,OAAAE,QAAA,qBACA,OAAAD,KAEAU,YAAA,EACAC,OAAA,OAGAC,QAAA,CACAN,QAAA,mIACAI,YAAA,GAEAG,QAAA,CACAP,QAAA,8BACAI,YAAA,GAEAI,QAAA,CACAR,QAAA,4DACAI,YAAA,GAEAK,SAAA,gBACAC,OAAA,CACA,6BACA,4CACAC,SAAA,2EACAC,YAAA,4BAEAC,EAAA,yDAAAC,OAAA,SAAAC,EAAAC,GAEA,OADAD,EAAAC,GAAApB,EAAAoB,GACAD,GACG,IACHnB,EAAA,cAAAqB,QAAA,SAAAC,GACAA,EAAAb,OAAAQ,IAzDA,CA2DCtB","file":"static/js/297.b52d66a2.chunk.js","sourcesContent":["(function (Prism) {\n  // Pascaligo is a layer 2 smart contract language for the tezos blockchain\n  var braces = /\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\)/.source;\n  var type = /(?:\\w+(?:<braces>)?|<braces>)/.source.replace(/<braces>/g, function () {\n    return braces;\n  });\n  var pascaligo = Prism.languages.pascaligo = {\n    'comment': /\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,\n    'string': {\n      pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,\n      greedy: true\n    },\n    'class-name': [{\n      pattern: RegExp(/(\\btype\\s+\\w+\\s+is\\s+)<type>/.source.replace(/<type>/g, function () {\n        return type;\n      }), 'i'),\n      lookbehind: true,\n      inside: null // see below\n\n    }, {\n      pattern: RegExp(/<type>(?=\\s+is\\b)/.source.replace(/<type>/g, function () {\n        return type;\n      }), 'i'),\n      inside: null // see below\n\n    }, {\n      pattern: RegExp(/(:\\s*)<type>/.source.replace(/<type>/g, function () {\n        return type;\n      })),\n      lookbehind: true,\n      inside: null // see below\n\n    }],\n    'keyword': {\n      pattern: /(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[^&])\\b(?:True|False)\\b/i,\n      lookbehind: true\n    },\n    'builtin': {\n      pattern: /(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,\n      lookbehind: true\n    },\n    'function': /\\w+(?=\\s*\\()/i,\n    'number': [// Hexadecimal, octal and binary\n    /%[01]+|&[0-7]+|\\$[a-f\\d]+/i, // Decimal\n    /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i],\n    'operator': /->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,\n    'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/\n  };\n  var classNameInside = ['comment', 'keyword', 'builtin', 'operator', 'punctuation'].reduce(function (accum, key) {\n    accum[key] = pascaligo[key];\n    return accum;\n  }, {});\n  pascaligo[\"class-name\"].forEach(function (p) {\n    p.inside = classNameInside;\n  });\n})(Prism);"],"sourceRoot":""}