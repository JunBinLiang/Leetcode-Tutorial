{"version":3,"sources":["../node_modules/prismjs/components/prism-purebasic.js"],"names":["Prism","languages","purebasic","extend","comment","keyword","function","number","operator","insertBefore","tag","asm","pattern","lookbehind","alias","inside","string","greedy","label-reference-anonymous","label-reference-addressed","function-inline","label","register","pbfasm"],"mappings":"8EAOAA,MAAAC,UAAAC,UAAAF,MAAAC,UAAAE,OAAA,SACAC,QAAA,MACAC,QAAA,+7BACAC,SAAA,2BACAC,OAAA,gDACAC,SAAA,2EAEAR,MAAAC,UAAAQ,aAAA,uBACAC,IAAA,OACAC,IAAA,CACAC,QAAA,aACAC,YAAA,EACAC,MAAA,MACAC,OAAA,CACAX,QAAA,MACAY,OAAA,CACAJ,QAAA,oCACAK,QAAA,GAGAC,4BAAA,CACAN,QAAA,4BACAC,YAAA,EACAC,MAAA,cAGAK,4BAAA,CACAP,QAAA,4CACAC,YAAA,EACAC,MAAA,cAEAR,SAAA,CACAM,QAAA,+BACAC,YAAA,GAEAO,kBAAA,CACAR,QAAA,2BACAC,YAAA,EACAC,MAAA,YAEAO,MAAA,CACAT,QAAA,2CACAC,YAAA,EACAC,MAAA,cAEAT,QAAA,+BAAuC,2BACvCiB,SAAA,gHACAf,OAAA,gLACAC,SAAA,oCAIAR,MAAAC,UAAAC,UAAA,qBACAF,MAAAC,UAAAC,UAAA,QACAF,MAAAC,UAAAsB,OAAAvB,MAAAC,UAAA","file":"static/js/331.cc0b2576.chunk.js","sourcesContent":["/*\nOriginal Code by Bas Groothedde\n!!MANY THANKS!! I never would have made this, regex and me will never be best friends ;)\n==> https://codepen.io/ImagineProgramming/details/JYydBy/\nslightly changed to pass all tests\n*/\n// PureBasic support, steal stuff from ansi-c\nPrism.languages.purebasic = Prism.languages.extend('clike', {\n  'comment': /;.*/,\n  'keyword': /\\b(?:declarecdll|declaredll|compilerselect|compilercase|compilerdefault|compilerendselect|compilererror|enableexplicit|disableexplicit|not|and|or|xor|calldebugger|debuglevel|enabledebugger|disabledebugger|restore|read|includepath|includebinary|threaded|runtime|with|endwith|structureunion|endstructureunion|align|newlist|newmap|interface|endinterface|extends|enumeration|endenumeration|swap|foreach|continue|fakereturn|goto|gosub|return|break|module|endmodule|declaremodule|enddeclaremodule|declare|declarec|prototype|prototypec|enableasm|disableasm|dim|redim|data|datasection|enddatasection|to|procedurereturn|debug|default|case|select|endselect|as|import|endimport|importc|compilerif|compilerelse|compilerendif|compilerelseif|end|structure|endstructure|while|wend|for|next|step|if|else|elseif|endif|repeat|until|procedure|proceduredll|procedurec|procedurecdll|endprocedure|protected|shared|static|global|define|includefile|xincludefile|macro|endmacro)\\b/i,\n  'function': /\\b\\w+(?:\\.\\w+)?\\s*(?=\\()/,\n  'number': /(?:\\$[\\da-f]+|\\b-?\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\b/i,\n  'operator': /(?:@\\*?|\\?|\\*)\\w+|-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*/@]/\n});\nPrism.languages.insertBefore('purebasic', 'keyword', {\n  'tag': /#\\w+/,\n  'asm': {\n    pattern: /(^\\s*)!.*/m,\n    lookbehind: true,\n    alias: 'tag',\n    inside: {\n      'comment': /;.*/,\n      'string': {\n        pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      // Anonymous label references, i.e.: jmp @b\n      'label-reference-anonymous': {\n        pattern: /(\\s*!\\s*j[a-z]+\\s+)@[fb]/i,\n        lookbehind: true,\n        alias: 'fasm-label'\n      },\n      // Named label reference, i.e.: jne label1\n      'label-reference-addressed': {\n        pattern: /(\\s*!\\s*j[a-z]+\\s+)[A-Z._?$@][\\w.?$@~#]*/i,\n        lookbehind: true,\n        alias: 'fasm-label'\n      },\n      'function': {\n        pattern: /^(\\s*!\\s*)[\\da-z]+(?=\\s|$)/im,\n        lookbehind: true\n      },\n      'function-inline': {\n        pattern: /(\\s*:\\s*)[\\da-z]+(?=\\s)/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'label': {\n        pattern: /^(\\s*!\\s*)[A-Za-z._?$@][\\w.?$@~#]*(?=:)/m,\n        lookbehind: true,\n        alias: 'fasm-label'\n      },\n      'keyword': [/(?:extern|global)[^;\\r\\n]*/i, /(?:CPU|FLOAT|DEFAULT).*/],\n      'register': /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s|mm\\d+)\\b/i,\n      'number': /(?:\\b|-|(?=\\$))(?:0[hx][\\da-f]*\\.?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|\\d*\\.?\\d+(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n      'operator': /[\\[\\]*+\\-/%<>=&|$!,.:]/\n    }\n  }\n});\ndelete Prism.languages.purebasic['class-name'];\ndelete Prism.languages.purebasic['boolean'];\nPrism.languages.pbfasm = Prism.languages['purebasic'];"],"sourceRoot":""}